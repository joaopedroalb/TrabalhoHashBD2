// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace interfaceblazor.Pages
{
    #line hidden
    using System;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Documents\Projetos\UNIFOR\BD\Interface\interfaceblazor\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Documents\Projetos\UNIFOR\BD\Interface\interfaceblazor\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Documents\Projetos\UNIFOR\BD\Interface\interfaceblazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Documents\Projetos\UNIFOR\BD\Interface\interfaceblazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Documents\Projetos\UNIFOR\BD\Interface\interfaceblazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Documents\Projetos\UNIFOR\BD\Interface\interfaceblazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Documents\Projetos\UNIFOR\BD\Interface\interfaceblazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Documents\Projetos\UNIFOR\BD\Interface\interfaceblazor\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Documents\Projetos\UNIFOR\BD\Interface\interfaceblazor\_Imports.razor"
using interfaceblazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Documents\Projetos\UNIFOR\BD\Interface\interfaceblazor\_Imports.razor"
using interfaceblazor.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Documents\Projetos\UNIFOR\BD\Interface\interfaceblazor\Pages\Interface.razor"
using interfaceblazor.Model.Pag;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Documents\Projetos\UNIFOR\BD\Interface\interfaceblazor\Pages\Interface.razor"
using System.Collections.Generic;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Documents\Projetos\UNIFOR\BD\Interface\interfaceblazor\Pages\Interface.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Documents\Projetos\UNIFOR\BD\Interface\interfaceblazor\Pages\Interface.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/interface")]
    public partial class Interface : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 91 "D:\Documents\Projetos\UNIFOR\BD\Interface\interfaceblazor\Pages\Interface.razor"
      
    public string ultimaPesquisa = "";
    public bool achouKey = false;
    public bool numeroDasPaginasSetados = false;
    public bool jaPercorreuOverflowArr = false;
    public int overflowsTotal = 0;
    public bool paginasPopulada = false;
    public int indexPaginaAux = 0;

    //out main variable
    public static List<Pagina> paginasArr = new List<Pagina>();
    public static BucketContainer[] bucketContainer = new BucketContainer[51839];
    public int acessoDisco = 0;
    public int colisoes = 0;

    public static string nomePesquisar = "";

    public static string info {get;set;} = "";

    //func 
    public static int HashLogic(string nome){
        int tamanhoMod = 51839;
        //int tamanhoMod = bucketContainer.Length;
        long sum = 0, mult = 1;
        for (int i = 0; i < nome.Length; i++){
                mult = (i % 4 == 0) ? 1 : mult * 256;
                sum += nome[i] * mult;
        }
        return (int)(Math.Abs(sum) % tamanhoMod);
    }

    public void adicionarHash(string nome, int id, int linha){
        int hashLogic = HashLogic(nome);
        if (bucketContainer[hashLogic] == null){
                bucketContainer[hashLogic] = new BucketContainer(new BucketObjeto(nome, id, linha));
        }else{
            bucketContainer[hashLogic].adicionar(new BucketObjeto(nome, id, linha));
            colisoes++;
            bucketContainer[hashLogic].colisao++;
         }
    }

    protected void buscarKey(){
        ultimaPesquisa = nomePesquisar;
        info = "";
        StateHasChanged();
        string key = nomePesquisar;
        int keyHash = HashLogic(key);
        bool achou = false;
        if (bucketContainer[HashLogic(key)] != null){
            foreach (Bucket bc in bucketContainer[HashLogic(key)].buckets){
                foreach (BucketObjeto bo in bc.vetorBO){
                    if (bo != null){
                        if (bo.key.ToLower() == key.ToLower()){
                            string nomeAux = paginasArr[bo.id].linhas[bo.linha - 1];
                            info += $"ID da pagina: {bo.id}\r";
                            info += $"Linha da pagina: {bo.linha}\r";
                            info += $"Nome: {nomeAux}\n";
                            acessoDisco++;
                            achou = true;
                            achouKey = true;
                            StateHasChanged();
                            break;
                        }
                    }
                 }
                    if (achou)
                        break;
            }
                if (!achou){
                    info = $"Não foi achado ninguem chamado {key}";
                    achouKey = false;
                    StateHasChanged();
                }
                    
        }
    }

    public static List<int> OverflowArr(){
        List<int> overflowArr = new List<int>();
        int indexAux = 0;
        foreach (BucketContainer bc in bucketContainer){
            if (bc != null){
                if (bc.buckets[0].overflow)
                     overflowArr.Add(indexAux);
            }
                indexAux++;
        }
            return overflowArr;
    }

    public static int numOverflow(){
        return OverflowArr().Count;
    }

    public static int overflowTotal(){
        int overflowTotais = 0;
        foreach(int index in OverflowArr()){
            overflowTotais += bucketContainer[index].buckets.Count;
        }
        return overflowTotais;
    }
   

    //in main variable

    //leitura do arquivo words.txt
    static string filePath = @"D:\Documents\Projetos\UNIFOR\BD\words.txt";
    static List<String> lines = File.ReadAllLines(filePath).ToList();
    int total = lines.Count;
    int indexPagina = 0;
    int tamanhoPag;
    
    public string avisoPaginas = "";

    //faz a criação da array de paginas totalmente vazia
    protected void addPagArr(){

        while(total>0){
            paginasArr.Add(new Pagina(tamanhoPag));
            total = total - tamanhoPag;
        }
        
        numeroDasPaginasSetados=true;
        StateHasChanged();
    }

    protected void addHashArr(){
        int line;
        int index = 0 ;
        foreach(var pagina in paginasArr){
            line = 1;
            foreach(string key in pagina.linhas){
                if(!string.IsNullOrEmpty(key))
                adicionarHash(key,index,line);
                line++;
            }
            index++;
        }
    }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
